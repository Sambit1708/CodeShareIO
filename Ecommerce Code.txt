public EmailNotificationResponse generateExceptionCutOfDateEmail(SvcFlowRequestWrapper requestWrapper, String cutoffDateStr) {
    LocalDate recordDate = LocalDate.parse(cutoffDateStr);
    LocalDate cutoffLocalDate = calculateCutoffLocalDate(requestWrapper);
    LocalDate cuttOfLocalDatePlusOne = LocalDate.parse(
        fundCodeDividendUtils.getBusinessDateForGivenDate(cutoffLocalDate, "1", requestWrapper).toString()
    );

    Object oneBusinessDayObj = fundCodeDividendUtils.getBusinessDateForGivenDate(cutoffLocalDate, "-1", requestWrapper);
    LocalDate oneBusinessDay = cutoffLocalDate;
    LocalDateTime oneBusinessDayTime = oneBusinessDay.atTime(12, 0);

    int month = recordDate.getMonthValue();
    int year = recordDate.getYear();

    if (fundDividendAmountRepository.existByMonthAndYear(month, year)) {
        log.info("Fund Dividend Amount already exists for the month: {} and year: {}", month, year);
        return generateSuccessResponse(
            String.format("Record already exists; no exception e-notification will be generated to user for month: %d and year: %d", month, year)
        );
    }

    if (recordDate.isEqual(oneBusinessDay)) {
        EmailNotify emailNotificationFromDB = emailNotificationRepository.findByFileNameAndEmailType(FILE_NAME, FUND_EXCEPTION_NOTIFICATION);

        if (emailNotificationFromDB == null) {
            log.warn("Email template not found for {} on cutoff date {}", FUND_EXCEPTION_NOTIFICATION, cutoffDateStr);
            return generateErrorResponse("Email template not found for " + FUND_EXCEPTION_NOTIFICATION);
        }

        try {
            String message = emailNotificationFromDB.getEmailContent()
                .replace("<<Projected Record Date>>", cuttOfLocalDatePlusOne.toString());

            emailNotificationFromDB.setEmailContent(message);
            sendEmailNotify(requestWrapper, emailNotificationFromDB);

            return generateSuccessResponse("Email generated successfully.");
        } catch (Exception e) {
            log.error("Error generating exception email: {}", e.getMessage(), e);
            return generateErrorResponse("Error sending exception email: " + e.getMessage());
        }
    }

    return generateSuccessResponse("Today is not the business day before cutoff. No email sent.");
}
